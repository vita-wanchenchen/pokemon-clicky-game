{"version":3,"sources":["serviceWorker.js","components/navbar.js","components/cover.js","components/image.js","components/container.js","components/footer.js","index.js"],"names":["Boolean","window","location","hostname","match","NavBar","_ref","score","topScore","message","react_default","a","createElement","className","href","Cover","src","alt","ImageCard","backgroundColor","selectedCharacter","onImageClick","concat","onClick","Container","colors","characters","Colors","map","color","index","components_image","key","Footer","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","info","selectedCharacters","setState","_","shuffle","currentScore","currentTopScore","name","_this2","delay","_this3","indexOf","push","topScoreUpdater","length","shuffleCharacters","checkForDuplicate","_this4","navbar","cover","container","handleSelectCharacters","footer","Component","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c64fc8d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst NavBar = ({ score, topScore, message }) => {\n\treturn (\n\t\t<div className='navbar-fixed'>\n\t\t\t<nav>\n\t\t\t\t<div className='nav-wrapper row yellow center-align flow-text'>\n\t\t\t\t\t<div className='col s4'>\n\t\t\t\t\t\t<a href='/'><b className='blue-text'>Pokemon Clicky Game</b></a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='col s4'>\n\t\t\t\t\t\t<span className='black-text'>{message}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='col s4'>\n\t\t\t\t\t\t<span className='blue-text'>Score: {score} | Top Score: {topScore}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</nav>\n\t\t</div>\n\t);\n};\n\nexport default NavBar;","import React from 'react';\n\nconst Cover = () => {\n\treturn (\n\t\t<div className='parallax-container center-align valign-wrapper'>\n\t\t\t<div className='section no-pad-bot'>\n\t\t\t\t<div className='container'>\n\t\t\t\t\t<div className='row'>\n\t\t\t\t\t    <h2 className='header col s12 light'>Pokemon Clicky Game</h2>\n\t\t\t\t\t\t<h4 className='header col s12 light'>Don't click on any image more than once!</h4>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className='parallax'>\n\t\t\t\t<img src='assets/images/pokemon-bg.jpg' alt='Cover' />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\nexport default Cover;","import React from 'react';\n\nconst ImageCard = ({ backgroundColor, selectedCharacter, onImageClick }) => {\n\treturn (\n\t\t<div className='col s3'>\n\t\t\t<div className={`card hoverable ${backgroundColor} lighten-3`} onClick={() => { onImageClick(selectedCharacter) }}>\n\t\t\t\t<div className='card-image'>\n\t\t\t\t\t<img src={`assets/images/${selectedCharacter}.png`} alt='Characters' />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default ImageCard;","import React from 'react';\nimport ImageCards from './image';\n\nconst Container = ({ colors, characters, onImageClick }) => {\n\tconst Colors = colors.map((color, index) => {\n\t\treturn (\n\t\t\t<ImageCards\n\t\t\t\tkey={color}\n\t\t\t\tbackgroundColor={color}\n\t\t\t\tselectedCharacter={characters[index]}\n\t\t\t\tonImageClick={onImageClick}\n\t\t\t/>\n\t\t)\n\t})\n\treturn (\n\t\t<div className='container'>\n\t\t\t<div className='row flow-text'>\n\t\t\t\t{Colors}\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Container;","import React from 'react';\n\nconst Footer = () => {\n\treturn (\n\t\t<footer className='page-footer yellow'>\n\t\t\t<div className='footer-copyright'>\n\t\t\t\t<div className='container center-align'>\n\t\t\t\t\t<span className='black-text'>© GT Bootcamp Pokemon Clicky Game</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</footer>\n\t);\n};\n\nexport default Footer;","import React, { Component }  from 'react';\nimport ReactDOM from 'react-dom';\nimport _ from 'lodash';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport NavBar from './components/navbar';\nimport Cover from './components/cover';\nimport Container from './components/container';\nimport Footer from './components/footer';\n\nconst characters = ['pokemon-01', 'pokemon-02', 'pokemon-03', 'pokemon-04', 'pokemon-05', 'pokemon-06', 'pokemon-07', 'pokemon-08', 'pokemon-09', 'pokemon-10', 'pokemon-11', 'pokemon-12',];\n\nconst colors = ['red', 'pink', 'purple', 'deep-purple', 'indigo', 'blue', 'light-blue', 'cyan', 'teal', 'green', 'light-green', 'lime',];\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tinfo: 'Click an image to begin!',\n\t\t\tscore: 0,\n\t\t\ttopScore: 0,\n\t\t\tcharacters: characters,\n\t\t\tselectedCharacters: []\n\t\t};\n\t};\n\n\tshuffleCharacters() {\n\t\tthis.setState({ characters: _.shuffle(characters) });\n\t};\n\n\ttopScoreUpdater(currentScore, currentTopScore, name) {\n\t\tcurrentScore++;\n\t\t_.delay(() => {\n\t\t\tthis.setState({ info: 'Choose your next character!' });\n\t\t}, 500);\n\t\tif (currentScore >= currentTopScore) {\n\t\t\treturn this.setState({ score: currentScore, topScore: currentScore, info: `${name} (Correct!)` });\n\t\t};\n\t\treturn this.setState({ score: currentScore, info: `${name} (Correct!)` });\n\t};\n\n\tcheckForDuplicate(name) {\n\t\tif (this.state.selectedCharacters.indexOf(name) === -1) {\n\t\t\tthis.state.selectedCharacters.push(name);\n\t\t\tthis.topScoreUpdater(this.state.score, this.state.topScore, name);\n\t\t\tif (this.state.selectedCharacters.length === characters.length) {\n\t\t\t\tthis.setState({ selectedCharacters: [] });\n\t\t\t};\n\t\t} else {\n\t\t\t_.delay(() => {\n\t\t\t\tthis.setState({ info: 'Try Again!' });\n\t\t\t}, 500);\n\t\t\tthis.setState({ score: 0, selectedCharacters: [], info: `${name} (Duplicate)!` });\n\t\t}\n\t\tthis.shuffleCharacters();\n\t};\n\n\thandleSelectCharacters(name) {\n\t\tthis.checkForDuplicate(name);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<NavBar\n\t\t\t\t\tscore={this.state.score}\n\t\t\t\t\ttopScore={this.state.topScore}\n\t\t\t\t\tmessage={this.state.info}\n\t\t\t\t/>\n\t\t\t\t<Cover />\n\t\t\t\t<div className=\"row\"></div>\n\t\t\t\t<Container\n\t\t\t\t\tcolors={colors}\n\t\t\t\t\tcharacters={this.state.characters}\n\t\t\t\t\tonImageClick={name => { this.handleSelectCharacters(name) }}\n\t\t\t\t/>\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t);\n\t};\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}